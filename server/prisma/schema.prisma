generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                      @id @default(cuid())
  phonenumber                String                      @unique
  name                       String
  age                        Int
  userClass                  String
  characterGender            String
  characterName              String
  characterStyle             String
  characterTraits            String[]
  createdAt                  DateTime                    @default(now())
  email                      String?
  selectedModule             String?
  role                       UserRole                    @default(USER)
  avatar                     String?
  communicationChallenges    CommunicationChallenge[]
  computersChallenges        ComputersChallenge[]
  dmChallenges               DMChallenge[]
  entrepreneurshipChallenges EntrepreneurshipChallenge[]
  environmentChallenges      EnvironmentChallenge[]
  financeChallenges          FinanceChallenge[]
  lawChallenges              LawChallenge[]
  leadershipChallenges       LeadershipChallenge[]
  modulePerformances         ModulePerformance[]
  payments                   Payment[]
  selChallenges              SELChallenge[]
  subscriptions              Subscription[]
  topicPerformances          TopicPerformance[]
}

model OtpVerification {
  phonenumber   String   @id
  otp           String
  otpExpiration DateTime
  createdAt     DateTime @default(now())
}

model FinanceChallenge {
  id             String    @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean   @default(false)
  completedAt    DateTime?
  user           User      @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model DMChallenge {
  id             String    @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean   @default(false)
  completedAt    DateTime?
  user           User      @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model CommunicationChallenge {
  id             String    @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean   @default(false)
  completedAt    DateTime?
  user           User      @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model ComputersChallenge {
  id             String    @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean   @default(false)
  completedAt    DateTime?
  user           User      @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model EntrepreneurshipChallenge {
  id             String    @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean   @default(false)
  completedAt    DateTime?
  user           User      @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model EnvironmentChallenge {
  id             String    @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean   @default(false)
  completedAt    DateTime?
  user           User      @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model LawChallenge {
  id             String    @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean   @default(false)
  completedAt    DateTime?
  user           User      @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model LeadershipChallenge {
  id             String    @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean   @default(false)
  completedAt    DateTime?
  user           User      @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model SELChallenge {
  id             String    @id @default(cuid())
  userId         String
  userClass      String
  moduleIndex    Int
  challengeIndex Int
  completed      Boolean   @default(false)
  completedAt    DateTime?
  user           User      @relation(fields: [userId], references: [id])

  @@unique([userId, userClass, moduleIndex, challengeIndex])
}

model ModulePerformance {
  id                  String    @id @default(cuid())
  userId              String
  moduleName          String
  totalGamesPlayed    Int
  completedGamesCount Int
  averageScorePerGame Float
  accuracy            Float
  avgResponseTimeSec  Float
  studyTimeMinutes    Int
  daysActiveCount     Int
  lastActiveDate      DateTime?
  lastGamePlayedAt    DateTime
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id])

  @@unique([userId, moduleName])
}

model TopicPerformance {
  id                  String   @id @default(cuid())
  userId              String
  moduleName          String
  topicName           String
  averageScorePerGame Float
  accuracy            Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  completedGamesCount Int
  user                User     @relation(fields: [userId], references: [id])

  @@unique([userId, moduleName, topicName])
}

model Blog {
  id              String    @id @default(cuid())
  title           String
  module          String
  introduction    String
  metaDescription String
  imageUrl        String
  imageId         String
  createdAt       DateTime  @default(now())
  readTime        String?
  tableOfContents Json
  comments        Comment[]
}

model Comment {
  id      String   @id @default(cuid())
  blogId  String
  name    String
  content String
  date    DateTime @default(now())
  blog    Blog     @relation(fields: [blogId], references: [id])
}

model Subscription {
  id        String             @id @default(cuid())
  userId    String
  planType  String
  status    SubscriptionStatus @default(ACTIVE)
  startDate DateTime           @default(now())
  endDate   DateTime
  amount    Float
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  notes     String?
  payments  Payment[]
  user      User               @relation(fields: [userId], references: [id])
}

model Payment {
  id                String        @id @default(cuid())
  userId            String
  subscriptionId    String?
  razorpayOrderId   String        @unique
  razorpayPaymentId String?       @unique
  amount            Float
  currency          String        @default("INR")
  status            PaymentStatus @default(COMPLETED)
  planType          String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  notes             String?
  subscription      Subscription? @relation(fields: [subscriptionId], references: [id])
  user              User          @relation(fields: [userId], references: [id])
}

model InstitutionalInquiry {
  id               String        @id @default(cuid())
  contactName      String
  contactEmail     String
  contactPhone     String
  organizationName String
  organizationType String
  studentCount     String
  message          String
  status           InquiryStatus @default(NEW)
  notes            String?
  followUpDate     DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model FreeTrialRequest {
  id           String        @id @default(cuid())
  fullName     String
  email        String
  phoneNumber  String
  class        String
  state        String
  city         String
  status       InquiryStatus @default(NEW)
  notes        String?
  followUpDate DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model SalesNotification {
  id        String             @id @default(cuid())
  message   String
  data      String
  status    NotificationStatus @default(UNREAD)
  inquiryId String?
  paymentId String?
  createdAt DateTime           @default(now())
  readAt    DateTime?
  trialId   String?
  type      NotificationType   @default(INSTITUTIONAL_INQUIRY)
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum PaymentStatus {
  COMPLETED
  FAILED
  REFUNDED
}

enum InquiryStatus {
  NEW
  CONTACTED
  FOLLOW_UP
  CONVERTED
  NOT_INTERESTED
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum UserRole {
  USER
  ADMIN
  SALES
}

enum NotificationType {
  FREE_TRIAL
  INSTITUTIONAL_INQUIRY
  PAYMENT
  GENERAL
}
